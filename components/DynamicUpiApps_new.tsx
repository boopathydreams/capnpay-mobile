import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, ScrollView, Platform, Linking, Alert } from 'react-native';
import { Ionicons } from '@expo/vector-icons';

// UPI app configurations
const UPI_APPS = [
  {
    id: 'googlepay',
    label: 'Google Pay',
    packageName: 'com.google.android.apps.nbu.paisa.user',
    iosScheme: 'gpay://',
    androidPackage: 'com.google.android.apps.nbu.paisa.user',
    icon: 'üí≥',
  },
  {
    id: 'phonepe',
    label: 'PhonePe',
    packageName: 'com.phonepe.app',
    iosScheme: 'phonepe://',
    androidPackage: 'com.phonepe.app',
    icon: 'üì±',
  },
  {
    id: 'paytm',
    label: 'Paytm',
    packageName: 'net.one97.paytm',
    iosScheme: 'paytmmp://',
    androidPackage: 'net.one97.paytm',
    icon: 'üíô',
  },
  {
    id: 'amazupay',
    label: 'Amazon Pay',
    packageName: 'in.amazon.mShop.android.shopping',
    iosScheme: 'amazonpay://',
    androidPackage: 'in.amazon.mShop.android.shopping',
    icon: 'üõí',
  },
] as const;

export type UpiApp = (typeof UPI_APPS)[number];

interface DynamicUpiAppsProps {
  vpa: string;
  payeeName?: string;
  amount: string;
  transactionNote?: string;
  transactionRef?: string;
  onAppSelect?: (app: UpiApp) => void;
  onPaymentLaunch?: (success: boolean, app: UpiApp, url: string) => void;
}

export default function DynamicUpiApps({
  vpa,
  payeeName,
  amount,
  transactionNote = 'Payment via CapnPay',
  transactionRef,
  onAppSelect,
  onPaymentLaunch,
}: DynamicUpiAppsProps) {
  const [installedApps, setInstalledApps] = useState<UpiApp[]>([]);
  const [isDetecting, setIsDetecting] = useState(true);
  const [selectedApp, setSelectedApp] = useState<UpiApp | null>(null);

  // NOTE: MERCHANT AGGREGATOR MODE
  // This component only handles UPI app selection UI
  // All UPI URLs are generated by the backend with merchant parameters

  // Detect installed UPI apps
  useEffect(() => {
    const detectInstalledApps = async () => {
      console.log('üîç Detecting installed UPI apps...');
      setIsDetecting(true);

      const detectedApps: UpiApp[] = [];

      try {
        if (Platform.OS === 'ios') {
          // iOS: Probe app schemes
          for (const app of UPI_APPS) {
            if (!app.iosScheme) continue;

            try {
              console.log(`üîç Checking iOS scheme: ${app.iosScheme}`);
              const canOpen = await Linking.canOpenURL(app.iosScheme);
              if (canOpen) {
                console.log(`‚úÖ ${app.label} is installed`);
                detectedApps.push(app);
              } else {
                console.log(`‚ùå ${app.label} not installed`);
              }
            } catch (error) {
              console.error(`Error checking ${app.label}:`, error);
            }
          }
        } else {
          // Android: All apps are potentially available
          console.log('üì± Android detected - showing all UPI apps');
          detectedApps.push(...UPI_APPS);
        }

        console.log(
          `‚úÖ Detected ${detectedApps.length} UPI apps:`,
          detectedApps.map((a) => a.label),
        );
        setInstalledApps(detectedApps);
      } catch (error) {
        console.error('‚ùå Error detecting UPI apps:', error);
        // Fallback: show all apps
        setInstalledApps([...UPI_APPS]);
      } finally {
        setIsDetecting(false);
      }
    };

    detectInstalledApps();
  }, []);

  // Launch payment with selected app (MERCHANT AGGREGATOR MODE)
  const launchPayment = (app: UpiApp) => {
    console.log(`üöÄ MERCHANT AGGREGATOR: User selected ${app.label}`);
    console.log('‚ö†Ô∏è Parent component should handle backend URL generation');

    // Notify parent to handle backend integration
    onAppSelect?.(app);
    onPaymentLaunch?.(true, app, 'BACKEND_GENERATED_URL');
  };

  // Handle app selection
  const handleAppPress = (app: UpiApp) => {
    console.log(`üì± User selected UPI app: ${app.label}`);
    setSelectedApp(app);
    launchPayment(app);
  };

  if (isDetecting) {
    return (
      <View style={{ padding: 20, alignItems: 'center' }}>
        <Text style={{ fontSize: 16, marginBottom: 10 }}>üîç Detecting UPI apps...</Text>
        <Text style={{ fontSize: 14, color: '#666', textAlign: 'center' }}>
          Checking which payment apps are installed on your device
        </Text>
      </View>
    );
  }

  if (installedApps.length === 0) {
    return (
      <View style={{ padding: 20, alignItems: 'center' }}>
        <Text style={{ fontSize: 16, marginBottom: 10, color: '#ff6b6b' }}>
          ‚ùå No UPI apps found
        </Text>
        <Text style={{ fontSize: 14, color: '#666', textAlign: 'center', marginBottom: 15 }}>
          Please install a UPI app like Google Pay, PhonePe, or Paytm to make payments.
        </Text>
        <TouchableOpacity
          onPress={() => {
            // Suggest Google Pay as primary option
            if (Platform.OS === 'android') {
              Linking.openURL('market://details?id=com.google.android.apps.nbu.paisa.user');
            } else {
              Linking.openURL('https://apps.apple.com/app/google-pay/id1193357041');
            }
          }}
          style={{
            backgroundColor: '#4285f4',
            paddingHorizontal: 20,
            paddingVertical: 12,
            borderRadius: 8,
          }}
        >
          <Text style={{ color: 'white', fontSize: 16, fontWeight: '600' }}>
            üì± Install Google Pay
          </Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={{ padding: 16 }}>
      <Text style={{ fontSize: 18, fontWeight: '600', marginBottom: 16, textAlign: 'center' }}>
        üí≥ Choose Payment App
      </Text>

      <Text style={{ fontSize: 14, color: '#666', marginBottom: 12, textAlign: 'center' }}>
        Pay ‚Çπ{amount} to {payeeName || vpa}
      </Text>

      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={{ marginBottom: 20 }}>
        <View style={{ flexDirection: 'row', paddingHorizontal: 8 }}>
          {installedApps.map((app) => (
            <TouchableOpacity
              key={app.id}
              onPress={() => handleAppPress(app)}
              style={{
                alignItems: 'center',
                marginHorizontal: 8,
                padding: 12,
                borderRadius: 12,
                backgroundColor: selectedApp?.id === app.id ? '#e3f2fd' : '#f5f5f5',
                borderWidth: selectedApp?.id === app.id ? 2 : 1,
                borderColor: selectedApp?.id === app.id ? '#2196f3' : '#ddd',
                minWidth: 80,
              }}
            >
              <Text style={{ fontSize: 32, marginBottom: 8 }}>{app.icon}</Text>
              <Text
                style={{
                  fontSize: 12,
                  fontWeight: selectedApp?.id === app.id ? '600' : '400',
                  textAlign: 'center',
                  color: selectedApp?.id === app.id ? '#1976d2' : '#333',
                }}
              >
                {app.label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>

      {selectedApp && (
        <View
          style={{
            backgroundColor: '#e8f5e8',
            padding: 12,
            borderRadius: 8,
            marginTop: 8,
          }}
        >
          <Text style={{ fontSize: 14, color: '#2e7d32', textAlign: 'center' }}>
            ‚úÖ {selectedApp.label} selected
          </Text>
        </View>
      )}
    </View>
  );
}
